version: '3.8'

services:
  # Main PX4 ROS2 development environment
  px4-dev:
    build:
      context: ./docker
      dockerfile: Dockerfile_simulation-ubuntu24
    image: px4-dev-simulation-ubuntu24
    container_name: px4_ros2_jazzy
    hostname: px4-dev
    environment:
      - DISPLAY=${DISPLAY}
      - QT_X11_NO_MITSHM=1
      - LOCAL_USER_ID=${LOCAL_USER_ID:-${UID:-1000}}
      - LOCAL_GROUP_ID=${LOCAL_GROUP_ID:-${GID:-1000}}
      - FASTRTPS_DEFAULT_PROFILES_FILE=/usr/local/share/middleware_profiles/rtps_udp_profile.xml
      - RMW_IMPLEMENTATION=rmw_zenoh_cpp
      - GIT_USER=${GIT_USER:-}
      - GIT_TOKEN=${GIT_TOKEN:-}
      - SUDO_PASSWORD=user
      - CONTAINER_NAME=px4_ros2_jazzy
      # WSL-specific environment variables
      - WAYLAND_DISPLAY=${WAYLAND_DISPLAY:-}
      - XDG_RUNTIME_DIR=${XDG_RUNTIME_DIR:-/tmp}
      - PULSE_SERVER=${PULSE_SERVER:-}
      - MESA_D3D12_DEFAULT_ADAPTER_NAME=NVIDIA
      - LD_LIBRARY_PATH=/usr/lib/wsl/lib:/usr/local/lib
      # Gazebo environment
      - GZ_VERSION=harmonic
      - GAZEBO_MODEL_PATH=/home/user/shared_volume/PX4-Autopilot/Tools/simulation/gz/models
      - GAZEBO_RESOURCE_PATH=/home/user/shared_volume/PX4-Autopilot/Tools/simulation/gz/worlds
    volumes:
      # Shared workspace with proper path
      - px4_workspace:/home/user/shared_volume
      # Display forwarding (Linux)
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      - /etc/localtime:/etc/localtime:ro
      # X11 authentication (Linux) - conditional mount
      - ${HOME}/.Xauthority:/home/user/.Xauthority:ro
      # WSL-specific mounts (will be ignored on Linux if not present)
      - /mnt/wslg:/mnt/wslg:ro
      - /usr/lib/wsl:/usr/lib/wsl:ro
      # Device access with error handling
      - /dev/input:/dev/input:ro
      - /dev/bus/usb:/dev/bus/usb:ro
    devices:
      # GPU devices (conditional - will be ignored if not present)
      - /dev/dri:/dev/dri
      # WSL GPU device (conditional)
      - /dev/dxg:/dev/dxg
    ports:
      - "14550:14550/udp"  # MAVLink default
      - "14556:14556/udp"  # MAVLink secondary
      - "14557:14557/udp"  # MAVLink MAVROS
      - "14540:14540/udp"  # MAVROS FCU
      - "8888:8888/udp"    # XRCE-DDS Agent
      - "5760:5760/tcp"    # QGroundControl
      - "11311:11311/tcp"  # ROS Master (if needed)
    networks:
      - px4_network
    working_dir: /home/user/shared_volume
    privileged: true
    stdin_open: true
    tty: true
    restart: unless-stopped
    profiles:
      - default
      - cpu
    command: >
      bash -c "
        # Wait for shared volume to be ready
        while [ ! -d '/home/user/shared_volume' ]; do
          echo 'Waiting for shared volume...' && sleep 1;
        done &&
        export DEV_DIR=/home/user/shared_volume &&
        export PX4_DIR=\$$DEV_DIR/PX4-Autopilot &&
        export ROS2_WS=\$$DEV_DIR/ros2_ws &&
        export OSQP_SRC=\$$DEV_DIR &&
        source /home/user/.bashrc &&
        if [ -f '/home/user/shared_volume/ros2_ws/install/setup.bash' ]; then
          source /home/user/shared_volume/ros2_ws/install/setup.bash;
        fi &&
        echo 'PX4 ROS2 Development Environment Ready!' &&
        echo 'Workspace: /home/user/shared_volume' &&
        echo 'To run install script: cd /home/user/shared_volume/ros2_ws/src/uav_gz_sim && ./install.sh' &&
        /bin/bash
      "

  # GPU-enabled version with NVIDIA runtime
  px4-dev-gpu:
    extends: px4-dev
    container_name: px4_ros2_jazzy_gpu
    hostname: px4-dev-gpu
    runtime: nvidia
    environment:
      - DISPLAY=${DISPLAY}
      - QT_X11_NO_MITSHM=1
      - LOCAL_USER_ID=${LOCAL_USER_ID:-${UID:-1000}}
      - LOCAL_GROUP_ID=${LOCAL_GROUP_ID:-${GID:-1000}}
      - FASTRTPS_DEFAULT_PROFILES_FILE=/usr/local/share/middleware_profiles/rtps_udp_profile.xml
      - RMW_IMPLEMENTATION=rmw_zenoh_cpp
      - GIT_USER=${GIT_USER:-}
      - GIT_TOKEN=${GIT_TOKEN:-}
      - SUDO_PASSWORD=user
      - CONTAINER_NAME=px4_ros2_jazzy_gpu
      # NVIDIA GPU settings
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=all
      - __GLX_VENDOR_LIBRARY_NAME=nvidia
      - NVIDIA_REQUIRE_CUDA=cuda>=11.0
      # WSL-specific environment variables
      - WAYLAND_DISPLAY=${WAYLAND_DISPLAY:-}
      - XDG_RUNTIME_DIR=${XDG_RUNTIME_DIR:-/tmp}
      - PULSE_SERVER=${PULSE_SERVER:-}
      - MESA_D3D12_DEFAULT_ADAPTER_NAME=NVIDIA
      - LD_LIBRARY_PATH=/usr/lib/wsl/lib:/usr/local/lib:/usr/local/cuda/lib64
      # Gazebo environment
      - GZ_VERSION=harmonic
      - GAZEBO_MODEL_PATH=/home/user/shared_volume/PX4-Autopilot/Tools/simulation/gz/models
      - GAZEBO_RESOURCE_PATH=/home/user/shared_volume/PX4-Autopilot/Tools/simulation/gz/worlds
    profiles:
      - gpu
    command: >
      bash -c "
        # Wait for shared volume to be ready
        while [ ! -d '/home/user/shared_volume' ]; do
          echo 'Waiting for shared volume...' && sleep 1;
        done &&
        # Check GPU availability
        if command -v nvidia-smi >/dev/null 2>&1; then
          echo 'NVIDIA GPU detected:' && nvidia-smi --query-gpu=name --format=csv,noheader,nounits;
        else
          echo 'Warning: nvidia-smi not available in container';
        fi &&
        export DEV_DIR=/home/user/shared_volume &&
        export PX4_DIR=\$$DEV_DIR/PX4-Autopilot &&
        export ROS2_WS=\$$DEV_DIR/ros2_ws &&
        export OSQP_SRC=\$$DEV_DIR &&
        source /home/user/.bashrc &&
        if [ -f '/home/user/shared_volume/ros2_ws/install/setup.bash' ]; then
          source /home/user/shared_volume/ros2_ws/install/setup.bash;
        fi &&
        echo 'PX4 ROS2 Development Environment Ready (GPU-Enabled)!' &&
        echo 'Workspace: /home/user/shared_volume' &&
        echo 'To run install script: cd /home/user/shared_volume/ros2_ws/src/uav_gz_sim && ./install.sh' &&
        /bin/bash
      "

  # XRCE-DDS Agent service (optional)
  xrce-agent:
    image: px4-dev-simulation-ubuntu24
    container_name: xrce-dds-agent
    hostname: xrce-agent
    restart: unless-stopped
    environment:
      - LOCAL_USER_ID=${LOCAL_USER_ID:-${UID:-1000}}
      - LOCAL_GROUP_ID=${LOCAL_GROUP_ID:-${GID:-1000}}
    command: >
      bash -c "
        echo 'Starting XRCE-DDS Agent on port 8888...' &&
        echo 'Waiting for network to be ready...' &&
        sleep 5 &&
        MicroXRCEAgent udp4 -p 8888 -v6
      "
    ports:
      - "8888:8888/udp"
    networks:
      - px4_network
    profiles:
      - xrce-agent
    depends_on:
      - px4-dev

  # MAVROS bridge service (optional)
  mavros-bridge:
    image: px4-dev-simulation-ubuntu24
    container_name: mavros-bridge
    hostname: mavros-bridge
    restart: unless-stopped
    environment:
      - RMW_IMPLEMENTATION=rmw_zenoh_cpp
      - LOCAL_USER_ID=${LOCAL_USER_ID:-${UID:-1000}}
      - LOCAL_GROUP_ID=${LOCAL_GROUP_ID:-${GID:-1000}}
    volumes:
      - px4_workspace:/home/user/shared_volume
    ports:
      - "14540:14540/udp"  # MAVROS FCU connection
      - "14557:14557/udp"  # MAVROS GCS connection
    networks:
      - px4_network
    profiles:
      - mavros
    depends_on:
      - px4-dev
    command: >
      bash -c "
        # Wait for workspace to be ready
        while [ ! -f '/home/user/shared_volume/ros2_ws/install/setup.bash' ]; do
          echo 'Waiting for ROS2 workspace...' && sleep 5;
        done &&
        source /opt/ros/jazzy/setup.bash &&
        source /home/user/shared_volume/ros2_ws/install/setup.bash &&
        echo 'Starting MAVROS bridge...' &&
        echo 'FCU URL: udp://:14540@127.0.0.1:14557' &&
        ros2 launch mavros px4.launch fcu_url:=udp://:14540@127.0.0.1:14557
      "

  # QGroundControl (optional - for GUI ground control)
  qgroundcontrol:
    image: px4-dev-simulation-ubuntu24
    container_name: qgroundcontrol
    hostname: qgc
    environment:
      - DISPLAY=${DISPLAY}
      - QT_X11_NO_MITSHM=1
      - LOCAL_USER_ID=${LOCAL_USER_ID:-${UID:-1000}}
      - LOCAL_GROUP_ID=${LOCAL_GROUP_ID:-${GID:-1000}}
      - WAYLAND_DISPLAY=${WAYLAND_DISPLAY:-}
      - XDG_RUNTIME_DIR=${XDG_RUNTIME_DIR:-/tmp}
    volumes:
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      - /mnt/wslg:/mnt/wslg:ro
      - px4_workspace:/home/user/shared_volume
      - qgc_data:/home/user/.config/QGroundControl
    ports:
      - "5760:5760/tcp"  # QGC communication
    networks:
      - px4_network
    profiles:
      - qgc
    command: >
      bash -c "
        # Wait for display to be ready
        sleep 2 &&
        QGC_PATH='/home/user/shared_volume/QGroundControl.AppImage' &&
        if [ ! -f \$$QGC_PATH ]; then
          echo 'Downloading QGroundControl...' &&
          cd /home/user/shared_volume &&
          wget -qO QGroundControl.AppImage 'https://d176tv9ibo4jno.cloudfront.net/latest/QGroundControl.AppImage' &&
          chmod +x QGroundControl.AppImage &&
          echo 'QGroundControl downloaded successfully';
        fi &&
        echo 'Starting QGroundControl...' &&
        cd /home/user/shared_volume &&
        ./QGroundControl.AppImage --no-sandbox
      "

  # ROS2 Bridge service (optional - for external ROS2 communication)
  ros2-bridge:
    image: px4-dev-simulation-ubuntu24
    container_name: ros2-bridge
    hostname: ros2-bridge
    restart: unless-stopped
    environment:
      - RMW_IMPLEMENTATION=rmw_zenoh_cpp
      - GZ_VERSION=harmonic
      - LOCAL_USER_ID=${LOCAL_USER_ID:-${UID:-1000}}
      - LOCAL_GROUP_ID=${LOCAL_GROUP_ID:-${GID:-1000}}
    volumes:
      - px4_workspace:/home/user/shared_volume
    networks:
      - px4_network
    profiles:
      - bridge
    depends_on:
      - px4-dev
    command: >
      bash -c "
        # Wait for workspace to be ready
        while [ ! -f '/home/user/shared_volume/ros2_ws/install/setup.bash' ]; do
          echo 'Waiting for ROS2 workspace...' && sleep 5;
        done &&
        source /opt/ros/jazzy/setup.bash &&
        source /home/user/shared_volume/ros2_ws/install/setup.bash &&
        echo 'Starting ROS2-Gazebo bridge...' &&
        ros2 run ros_gz_bridge parameter_bridge /clock@rosgraph_msgs/msg/Clock[ignition.msgs.Clock --ros-args -r __ns:=/bridge
      "

# Named volumes for persistent data
volumes:
  px4_workspace:
    driver: local
    driver_opts:
      type: none
      o: bind
      # Use absolute path that works across different environments
      device: ${PWD}/../../../../../../px4_ros2_jazzy_shared_volume
  qgc_data:
    driver: local

# Custom network for service communication
networks:
  px4_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1 